import { EventEmitter, OnChanges, OnDestroy, OnInit, ElementRef } from '@angular/core';
import { NgProgress } from './ng-progress.service';
import { NgProgressRef } from './ng-progress-ref';
import * as i0 from "@angular/core";
export declare class NgProgressComponent implements OnInit, OnChanges, OnDestroy {
    private _ngProgress;
    private _state;
    private _started;
    private _completed;
    /** Progress bar worker */
    progressRef: NgProgressRef;
    /** Creates a new instance if id is not already exists */
    id: string;
    /** Initializes inputs from the global config */
    min: number;
    max: number;
    ease: string;
    color: string;
    speed: number;
    thick: boolean;
    fixed: boolean;
    meteor: boolean;
    spinner: boolean;
    trickleSpeed: number;
    debounceTime: number;
    trickleFunc: (n: number) => number;
    spinnerPosition: 'left' | 'right';
    direction: 'ltr+' | 'ltr-' | 'rtl+' | 'rtl-';
    started: EventEmitter<any>;
    completed: EventEmitter<any>;
    progressElement: ElementRef<HTMLElement>;
    progressWrapperElement: ElementRef<HTMLElement>;
    get isStarted(): boolean;
    constructor(_ngProgress: NgProgress);
    ngOnChanges(): void;
    ngOnInit(): void;
    ngOnDestroy(): void;
    start(): void;
    complete(): void;
    inc(n?: number): void;
    set(n: number): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<NgProgressComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<NgProgressComponent, "ng-progress", never, { "id": { "alias": "id"; "required": false; }; "min": { "alias": "min"; "required": false; }; "max": { "alias": "max"; "required": false; }; "ease": { "alias": "ease"; "required": false; }; "color": { "alias": "color"; "required": false; }; "speed": { "alias": "speed"; "required": false; }; "thick": { "alias": "thick"; "required": false; }; "fixed": { "alias": "fixed"; "required": false; }; "meteor": { "alias": "meteor"; "required": false; }; "spinner": { "alias": "spinner"; "required": false; }; "trickleSpeed": { "alias": "trickleSpeed"; "required": false; }; "debounceTime": { "alias": "debounceTime"; "required": false; }; "trickleFunc": { "alias": "trickleFunc"; "required": false; }; "spinnerPosition": { "alias": "spinnerPosition"; "required": false; }; "direction": { "alias": "direction"; "required": false; }; }, { "started": "started"; "completed": "completed"; }, never, never, false, never>;
}
